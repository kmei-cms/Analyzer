# Variables set by configure 
TENSORFLOW_DIR = @TENSORFLOWDIR@
TENSORFLOWLIBS = @TENSORFLOWLIBS@

CXX      = @CXX@
LD       = @CXX@
CXXFLAGS = @CXXFLAGS@
LDFLAGS  = @LDFLAGS@

# Path to source directories
WDIR    = .
ODIR    = obj
IFWDIR  = $(CMSSW_BASE)/src/Framework/Framework/include
SFWDIR  = $(CMSSW_BASE)/src/Framework/Framework/src
IADIR   = $(CMSSW_BASE)/src/Analyzer/Analyzer/include
SADIR   = $(CMSSW_BASE)/src/Analyzer/Analyzer/src
SSDIR   = $(CMSSW_BASE)/src/SusyAnaTools/Tools
ITTDir  = $(CMSSW_BASE)/CfgParser/include
STTDir  = $(CMSSW_BASE)/CfgParser/src
TDIR    = $(CMSSW_BASE)/src
TTDIR   = $(CMSSW_BASE)/src/TopTagger/
TTTDIR  = $(TTDIR)/TopTagger/test

# Enable the maximun warning
CXXFLAGS += -Wall -Wextra -Wpedantic

# Flags for generating auto dependancies
CXXDEPFLAGS = -MMD -MP

##########################################################
#Necessary includes and libraries, the order matters here!
##########################################################

# Top tagger libraries
LIBSTOPTAGGER += -L$(TTTDIR) -lTopTagger

# Include ROOT
INCLUDESDIRS  += $(shell root-config --cflags)

# ROOT libraries
LIBS          += $(shell root-config --glibs)

# Tensorflow includes and libraries
ifdef TENSORFLOW_DIR
	INCLUDESDIRS += -I$(TENSORFLOW_DIR)/include
	CXXFLAGS     += -DDOTENSORFLOW
	LIBS         += -L$(TENSORFLOW_DIR)/lib $(TENSORFLOWLIBS)
endif

# Include our code
INCLUDESDIRS += -I$(TDIR) -I$(IFWDIR) -I$(SFWDIR) -I$(IADIR) -I$(SADIR) -I$(SSDIR) -I$(ITTDir) -I$(STTDir)

PROGRAMS = MyAnalysis plot_1l Stack_plot_0l Stack_plot_1l Stack_plot_2l

ANALYZERS  = $(ODIR)/AnalyzeLepTrigger_NIM $(ODIR)/MakeNewQCDSystematic.o $(ODIR)/ExtraChecksv2.o $(ODIR)/ExtraChecks.o $(ODIR)/MakeQCDChecks.o $(ODIR)/MakeANPlots.o $(ODIR)/AnalyzeSignalKM.o $(ODIR)/AnalyzeNonIsoMuonTrigger.o $(ODIR)/MiniTupleMaker.o $(ODIR)/CalculateBTagSF.o $(ODIR)/BTagCalibrationStandalone.o $(ODIR)/MakeMiniTree.o $(ODIR)/AnalyzeLepTrigger.o $(ODIR)/AnalyzeTest.o 
ANALYZERS += $(ODIR)/AnalyzeWControlRegion.o $(ODIR)/MakeMiniTree.o $(ODIR)/CalculateBTagSF.o $(ODIR)/AnalyzeBTagSF.o $(ODIR)/BTagCalibrationStandalone.o 
ANALYZERS += $(ODIR)/AnalyzeBackground.o $(ODIR)/AnalyzeTopTagger.o $(ODIR)/AnalyzeEventSelection.o $(ODIR)/AnalyzeEventShape.o $(ODIR)/Analyze0Lep.o $(ODIR)/Analyze1Lep.o 
ANALYZERS += $(ODIR)/AnalyzeNjetsMinusOneCSFillDijetHists.o $(ODIR)/AnalyzeNjetsMinusOneCSJetReplacement.o $(ODIR)/Semra_Analyzer.o $(ODIR)/TwoLepAnalyzer.o 
ANALYZERS += $(ODIR)/AnalyzeHEM.o $(ODIR)/AnalyzeSignalModels.o $(ODIR)/AnalyzeEENoise.o

HELPERS  = $(ODIR)/NTupleReader.o $(ODIR)/Utility.o $(ODIR)/samples.o $(ODIR)/EventShapeVariables.o $(ODIR)/SetUpTopTagger.o $(ODIR)/SATException.o $(ODIR)/histio.o 
HELPERS += $(ODIR)/Make2LInputTrees.o $(ODIR)/MT2Hemispheres.o $(ODIR)/StealthHemispheres.o 

all: mkobj sampPyWrap $(PROGRAMS) link

mkobj:
	@mkdir -p $(ODIR)

# Code to compile shared library to link samples to python
sampPyWrap: $(ODIR)/samplesModule.so

$(ODIR)/samplesModule.so: $(ODIR)/samplesPyWrap.o $(ODIR)/samplesModulePyWrap.o
	$(CXX) -shared -o $@ $^

$(ODIR)/samplesPyWrap.o: $(SSDIR)/samples.cc $(SSDIR)/samples.h 
	$(CXX) --std=c++11 -c -fPIC -o $@ $<

$(ODIR)/samplesModulePyWrap.o: $(SSDIR)/samplesModule.cc
	$(CXX) --std=c++11 -c -fPIC -o $@ $<

# Framework Repo
$(ODIR)/%.o : $(SFWDIR)/%.C
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SFWDIR)/%.c
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SFWDIR)/%.cc
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SFWDIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

# Analyzer Repo
$(ODIR)/%.o : $(SADIR)/%.C
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SADIR)/%.c
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SADIR)/%.cc
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SADIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

# SusyAnaTools Repo
$(ODIR)/%.o : $(SSDIR)/%.C
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SSDIR)/%.c
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SSDIR)/%.cc
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SSDIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

# TopTagger Repo
$(ODIR)/%.o : $(STTDir)/%.C
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(STTDir)/%.c
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(STTDir)/%.cc
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(STTDir)/%.cpp
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

# Working Directory 
$(ODIR)/%.o : $(WDIR)/%.C
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(WDIR)/%.c
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(WDIR)/%.cc
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(WDIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS)  $(INCLUDESDIRS) -o $@ -c $<

# Make executables
MyAnalysis: $(ODIR)/MyAnalysis.o $(HELPERS) $(ANALYZERS)
	$(LD) $^ $(LIBSTOPTAGGER) $(LIBS) -o $@

plot_1l: $(ODIR)/plot_1l.o
	$(LD) $^ $(LIBS) -o $@

Stack_plot_0l: $(ODIR)/Stack_plot_0l.o
	$(LD) $^ $(LIBS) -o $@

Stack_plot_1l: $(ODIR)/Stack_plot_1l.o
	$(LD) $^ $(LIBS) -o $@

Stack_plot_2l: $(ODIR)/Stack_plot_2l.o
	$(LD) $^ $(LIBS) -o $@

Stack_plot: $(ODIR)/Stack_plot.o
	$(LD) $^ $(LIBS) -o $@ 

# Setup soft link to the SusyAnaTools repo for python API
link: 
	@makeSoftLink.sh $(CMSSW_BASE)/src/Analyzer/Analyzer/test/ $(ODIR) $(CMSSW_BASE)/src/SusyAnaTools/Tools/

# Unlink SusyAnaTools soft link and remove obj directory 
clean:
	@rm -rf $(ODIR)/*.o $(ODIR)/*.so $(ODIR)/*.d $(PROGRAMS) core $(ODIR) && rmSoftLink.sh ${CMSSW_BASE}/src/SusyAnaTools/Tools/$(ODIR)

-include $(ODIR)/*.d
